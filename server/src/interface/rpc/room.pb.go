// Code generated by protoc-gen-go. DO NOT EDIT.
// source: room.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoomName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomName) Reset()         { *m = RoomName{} }
func (m *RoomName) String() string { return proto.CompactTextString(m) }
func (*RoomName) ProtoMessage()    {}
func (*RoomName) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fd27dd97284ef4, []int{0}
}

func (m *RoomName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomName.Unmarshal(m, b)
}
func (m *RoomName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomName.Marshal(b, m, deterministic)
}
func (m *RoomName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomName.Merge(m, src)
}
func (m *RoomName) XXX_Size() int {
	return xxx_messageInfo_RoomName.Size(m)
}
func (m *RoomName) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomName.DiscardUnknown(m)
}

var xxx_messageInfo_RoomName proto.InternalMessageInfo

func (m *RoomName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Room struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Users                []*User  `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Room) Reset()         { *m = Room{} }
func (m *Room) String() string { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()    {}
func (*Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fd27dd97284ef4, []int{1}
}

func (m *Room) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Room.Unmarshal(m, b)
}
func (m *Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Room.Marshal(b, m, deterministic)
}
func (m *Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Room.Merge(m, src)
}
func (m *Room) XXX_Size() int {
	return xxx_messageInfo_Room.Size(m)
}
func (m *Room) XXX_DiscardUnknown() {
	xxx_messageInfo_Room.DiscardUnknown(m)
}

var xxx_messageInfo_Room proto.InternalMessageInfo

func (m *Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Room) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*RoomName)(nil), "rpc.RoomName")
	proto.RegisterType((*Room)(nil), "rpc.Room")
}

func init() { proto.RegisterFile("room.proto", fileDescriptor_c5fd27dd97284ef4) }

var fileDescriptor_c5fd27dd97284ef4 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xca, 0xcf, 0xcf,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x96, 0xe2, 0x2a, 0x2d, 0x4e,
	0x2d, 0x82, 0x08, 0x28, 0xc9, 0x71, 0x71, 0x04, 0xe5, 0xe7, 0xe7, 0xfa, 0x25, 0xe6, 0xa6, 0x0a,
	0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9,
	0x4a, 0xd6, 0x5c, 0x2c, 0x20, 0x79, 0x6c, 0x72, 0x42, 0xf2, 0x5c, 0xac, 0x20, 0x93, 0x8a, 0x25,
	0x98, 0x14, 0x98, 0x35, 0xb8, 0x8d, 0x38, 0xf5, 0x8a, 0x0a, 0x92, 0xf5, 0x42, 0x8b, 0x53, 0x8b,
	0x82, 0x20, 0xe2, 0x46, 0x06, 0x5c, 0xdc, 0x20, 0xcd, 0x1e, 0x89, 0x79, 0x29, 0x39, 0xa9, 0x45,
	0x42, 0x8a, 0x5c, 0xec, 0xee, 0xa9, 0x25, 0x60, 0xe3, 0x20, 0x6a, 0x41, 0x4c, 0x29, 0x04, 0x53,
	0x89, 0x21, 0x89, 0x0d, 0xec, 0x2a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x05, 0x20,
	0x3d, 0xb4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoomHandlerClient is the client API for RoomHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomHandlerClient interface {
	GetRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Room, error)
}

type roomHandlerClient struct {
	cc *grpc.ClientConn
}

func NewRoomHandlerClient(cc *grpc.ClientConn) RoomHandlerClient {
	return &roomHandlerClient{cc}
}

func (c *roomHandlerClient) GetRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/rpc.RoomHandler/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomHandlerServer is the server API for RoomHandler service.
type RoomHandlerServer interface {
	GetRoom(context.Context, *Room) (*Room, error)
}

// UnimplementedRoomHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedRoomHandlerServer struct {
}

func (*UnimplementedRoomHandlerServer) GetRoom(ctx context.Context, req *Room) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}

func RegisterRoomHandlerServer(s *grpc.Server, srv RoomHandlerServer) {
	s.RegisterService(&_RoomHandler_serviceDesc, srv)
}

func _RoomHandler_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomHandlerServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RoomHandler/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomHandlerServer).GetRoom(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RoomHandler",
	HandlerType: (*RoomHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoom",
			Handler:    _RoomHandler_GetRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room.proto",
}
